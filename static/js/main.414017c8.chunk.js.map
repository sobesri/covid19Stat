{"version":3,"sources":["services/api.service.ts","types.tsx","content/Main.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["instanceSl","axios","create","baseURL","instanceGlobal","defaults","headers","common","FilterType","apiService","get","getStatistics_HPB","then","res","data","getStatistics_Global","instance","controller","action","urlParams","queryParams","apiRequest","method","url","createUrl","options","createRequestOptions","request","catch","error","console","log","forEach","param","params","queryString","responseType","FilterSelectOptions","label","value","Confirmed","Deaths","Recovered","NewConfirmed","NewDeaths","NewRecovered","FilterDirectionOptions","LOCAL_TIMELINE","date","Date","recovered","deaths","confirmed","Main","useState","setData","updatedDate","setDate","globalUpdateTime","setGlobalUpdateTime","dataLocal","setDataLocal","dataGlobal","setDataGlobal","getTime","time","setTime","countrySummaries","setSummaries","selectedSummary","setSelected","searchTerm","setSearchTerm","filterType","setFilterType","filterDirection","setFilterDirection","showTimeLine","toggleTimeLine","useEffect","getData","timer","setTimeout","clearTimeout","useLayoutEffect","handleScroll","goToTop","document","getElementById","goToGlobal","globalPanel","window","scrollY","offsetTop","style","display","addEventListener","removeEventListener","update_date_time","d","local_new_cases","local_total_cases","local_total_number_of_individuals_in_hospitals","local_deaths","local_new_deaths","local_recovered","global_new_cases","global_total_cases","global_deaths","global_new_deaths","global_recovered","gDataGlobal","labels","datasets","backgroundColor","borderWidth","Countries","chartOptions","maintainAspectRatio","aspectRatio","rotation","Math","PI","legend","fontColor","position","layout","padding","left","right","top","bottom","compare","a","b","ac","TotalConfirmed","bc","TotalDeaths","TotalRecovered","id","className","moment","utc","local","format","href","target","rel","Button","type","onClick","toLocaleString","width","InputGroup","Input","onChange","e","placeholder","InputGroupAddon","addonType","undefined","title","filter","v","filtered","c","Country","toLocaleLowerCase","includes","sort","length","map","summary","index","key","generateFilteredContents","Modal","isOpen","toggle","ModalHeader","ModalBody","Row","Col","md","xs","generateChartModal","ModalFooter","body","scrollTop","documentElement","borderColor","scales","xAxes","ticks","callback","split","gridLines","drawOnChartArea","generateTimeLineChartModal","App","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.414017c8.chunk.js","sourcesContent":["import * as queryString from 'query-string';\r\n\r\nimport axios, { AxiosRequestConfig, Method, AxiosInstance } from 'axios';\r\nimport { Full_response_data, Full_response_data_global } from '../types';\r\n\r\nvar instanceSl = axios.create({\r\n  baseURL: 'https://hpb.health.gov.lk/api/',\r\n});\r\n\r\nvar instanceGlobal = axios.create({\r\n  baseURL: 'https://api.covid19api.com/'\r\n})\r\n\r\naxios.defaults.headers.common['Content-Type'] = 'application/json';\r\naxios.defaults.headers.common['Accept'] = 'application/json';\r\n\r\nexport const apiService = {\r\n  get,\r\n  getStatistics_HPB,\r\n  getStatistics_Global\r\n}\r\n\r\nfunction getStatistics_HPB() {\r\n  return get<Full_response_data>(instanceSl, '', 'get-current-statistical', [])\r\n    .then((res: any) => res.data);\r\n}\r\n\r\nfunction getStatistics_Global() {\r\n  return get<Full_response_data_global>(instanceGlobal, '', 'summary', [])\r\n    .then((res: any) => res);\r\n}\r\n\r\nfunction get<T>(instance: AxiosInstance, controller: string, action: string = '', urlParams: string[] = [], queryParams: any = null) {\r\n  return apiRequest<T>(instance, 'get', controller, action, null, urlParams, queryParams);\r\n}\r\n\r\nfunction apiRequest<T>(instance: AxiosInstance, method: Method, controller: string, action: string = '', data: any, urlParams: string[] = [],\r\n  queryParams: any = null) {\r\n  let url = createUrl(controller, action, urlParams, queryParams);\r\n  let options = createRequestOptions(url, method, data);\r\n\r\n  return instance.request<T>(options)\r\n    .then(res => res && res.data)\r\n    .catch(error => {\r\n      console.log(error);\r\n      throw error;\r\n    });\r\n}\r\n\r\nfunction createUrl(controller: string, action: string = '', urlParams: string[] = [], queryParams: any = null) {\r\n  let url = controller + (action ? '/' + action : '');\r\n\r\n  urlParams.forEach(param => {\r\n    url += '/' + param;\r\n  });\r\n\r\n  let params = '';\r\n  if (queryParams) {\r\n    params += '?' + queryString.stringify(queryParams);\r\n  }\r\n\r\n  return url += params;\r\n}\r\n\r\nfunction createRequestOptions(url: string, method: Method, data: any, responseType?: any) {\r\n  var options: AxiosRequestConfig = {\r\n    url,\r\n    method,\r\n    data\r\n  }\r\n\r\n  if (responseType) {\r\n    options.responseType = responseType;\r\n  }\r\n\r\n  return options;\r\n}\r\n","export interface Response_data {\r\n  local_new_cases: number;\r\n  local_total_cases: number;\r\n  local_total_number_of_individuals_in_hospitals: number;\r\n  local_deaths: number;\r\n  local_new_deaths: number;\r\n  local_recovered: number;\r\n\r\n  global_new_cases: number;\r\n  global_total_cases: number;\r\n  global_deaths: number;\r\n  global_new_deaths: number;\r\n  global_recovered: number;\r\n}\r\n\r\nexport interface Full_response_data extends Response_data {\r\n  update_date_time: string;\r\n}\r\n\r\nexport interface Full_response_data_global {\r\n  Countries: CountrySummaryDto[];\r\n  Date: Date;\r\n}\r\n\r\nexport interface CountrySummaryDto {\r\n  Country: string,\r\n  NewConfirmed: number,\r\n  NewDeaths: number,\r\n  NewRecovered: number,\r\n  Slug: string,\r\n  TotalConfirmed: number,\r\n  TotalDeaths: number,\r\n  TotalRecovered: number\r\n}\r\n\r\nexport interface CaseSummary {\r\n  date: Date,\r\n  confirmed: number,\r\n  deaths: number,\r\n  recovered: number\r\n}\r\n\r\n\r\nexport enum FilterType {\r\n  Confirmed = 0,\r\n  Deaths = 1,\r\n  Recovered = 2,\r\n  NewConfirmed = 3,\r\n  NewDeaths = 4,\r\n  NewRecovered = 5\r\n}\r\n\r\nexport const FilterSelectOptions: any = [\r\n  { label: 'Total Confirmed', value: FilterType.Confirmed },\r\n  { label: 'Total Deaths', value: FilterType.Deaths },\r\n  { label: 'Total Recovered', value: FilterType.Recovered },\r\n  { label: 'New Confirmed', value: FilterType.NewConfirmed },\r\n  { label: 'New Deaths', value: FilterType.NewDeaths },\r\n  { label: 'New Recovered', value: FilterType.NewRecovered }\r\n];\r\n\r\nexport const FilterDirectionOptions: any = [\r\n  { label: 'Desc', value: 0 },\r\n  { label: 'Asc', value: 1 }\r\n];\r\n\r\n\r\nexport const LOCAL_TIMELINE: CaseSummary[] = [\r\n  { date: new Date(2020, 2, 11), recovered: 0, deaths: 0, confirmed: 1 },\r\n  { date: new Date(2020, 2, 12), recovered: 0, deaths: 0, confirmed: 1 },\r\n  { date: new Date(2020, 2, 12), recovered: 0, deaths: 0, confirmed: 2 },\r\n  { date: new Date(2020, 2, 13), recovered: 0, deaths: 0, confirmed: 4 },\r\n  { date: new Date(2020, 2, 14), recovered: 0, deaths: 0, confirmed: 6 },\r\n  { date: new Date(2020, 2, 15), recovered: 0, deaths: 0, confirmed: 11 },\r\n  { date: new Date(2020, 2, 16), recovered: 0, deaths: 0, confirmed: 19 },\r\n  { date: new Date(2020, 2, 17), recovered: 0, deaths: 0, confirmed: 29 },\r\n  { date: new Date(2020, 2, 18), recovered: 0, deaths: 0, confirmed: 42 },\r\n  { date: new Date(2020, 2, 19), recovered: 0, deaths: 0, confirmed: 53 },\r\n  { date: new Date(2020, 2, 20), recovered: 0, deaths: 0, confirmed: 66 },\r\n  { date: new Date(2020, 2, 21), recovered: 0, deaths: 0, confirmed: 72 },\r\n  { date: new Date(2020, 2, 22), recovered: 0, deaths: 0, confirmed: 78 },\r\n  { date: new Date(2020, 2, 23), recovered: 0, deaths: 0, confirmed: 87 },\r\n  { date: new Date(2020, 2, 24), recovered: 2, deaths: 0, confirmed: 97 },\r\n  { date: new Date(2020, 2, 25), recovered: 3, deaths: 0, confirmed: 102 },\r\n  { date: new Date(2020, 2, 26), recovered: 3, deaths: 0, confirmed: 102 },\r\n  { date: new Date(2020, 2, 27), recovered: 7, deaths: 0, confirmed: 106 },\r\n  { date: new Date(2020, 2, 28), recovered: 9, deaths: 1, confirmed: 113 },\r\n  // { date: new Date(2020, 2, 29), recovered: 9, deaths: 1, confirmed: 113 },\r\n];\r\n","import React, { useState, useEffect, useLayoutEffect } from 'react';\r\nimport { apiService } from '../services/api.service';\r\nimport { Response_data, Full_response_data, CountrySummaryDto, Full_response_data_global, FilterType, FilterSelectOptions, FilterDirectionOptions, LOCAL_TIMELINE, CaseSummary } from '../types';\r\nimport { Button, ModalHeader, Modal, ModalBody, ModalFooter, Input, Row, Col, InputGroup, InputGroupAddon } from 'reactstrap';\r\nimport { Chart } from 'primereact/chart';\r\nimport Select from 'react-select';\r\n\r\nimport moment from 'moment';\r\n\r\nconst Main = () => {\r\n  const [data, setData] = useState<Response_data>();\r\n  const [updatedDate, setDate] = useState<Date>(new Date());\r\n  const [globalUpdateTime, setGlobalUpdateTime] = useState<Date>(new Date());\r\n  const [dataLocal, setDataLocal] = useState<any>();\r\n  const [dataGlobal, setDataGlobal] = useState<any>();\r\n  const [time, setTime] = useState(new Date().getTime());\r\n  const [countrySummaries, setSummaries] = useState<CountrySummaryDto[]>();\r\n  const [selectedSummary, setSelected] = useState<CountrySummaryDto>();\r\n  const [searchTerm, setSearchTerm] = useState();\r\n  const [filterType, setFilterType] = useState(FilterType.Confirmed);\r\n  const [filterDirection, setFilterDirection] = useState(FilterType.Confirmed);\r\n  const [showTimeLine, toggleTimeLine] = useState(false);\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const timer = setTimeout(() => {\r\n      setTime(new Date().getTime());\r\n      getData();\r\n    }, 300000);\r\n\r\n    return () => {\r\n      clearTimeout(timer);\r\n    };\r\n  }, [time]);\r\n\r\n  useLayoutEffect(() => {\r\n    const handleScroll = () => {\r\n      var goToTop = document.getElementById(\"goToTopButton\");\r\n      var goToGlobal = document.getElementById(\"goToGlobalButton\");\r\n\r\n      var globalPanel = document.getElementById(\"global\");\r\n\r\n      if (goToTop && goToGlobal) {\r\n        if (window.scrollY > (globalPanel ? globalPanel.offsetTop : 500) / 2)\r\n          goToGlobal.style.display = \"none\";\r\n        else\r\n          goToGlobal.style.display = \"block\";\r\n        if (window.scrollY > 900)\r\n          goToTop.style.display = \"block\";\r\n\r\n        else\r\n          goToTop.style.display = \"none\";\r\n\r\n      }\r\n    }\r\n\r\n    window.addEventListener('scroll', handleScroll)\r\n\r\n    return () => window.removeEventListener('scroll', handleScroll)\r\n  }, [])\r\n\r\n  const onGoToGlobalClicked = () => {\r\n    var globalPanel = document.getElementById(\"global\");\r\n    document.body.scrollTop = globalPanel ? globalPanel.offsetTop : 0;\r\n    document.documentElement.scrollTop = globalPanel ? globalPanel.offsetTop : 0;\r\n  }\r\n\r\n  const getData = () => {\r\n    apiService.getStatistics_HPB()\r\n      .then((res: Full_response_data) => {\r\n        setDate(new Date(res.update_date_time));\r\n\r\n        let d: Response_data = {\r\n          local_new_cases: res.local_new_cases,\r\n          local_total_cases: res.local_total_cases,\r\n          local_total_number_of_individuals_in_hospitals: res.local_total_number_of_individuals_in_hospitals,\r\n          local_deaths: res.local_deaths,\r\n          local_new_deaths: res.local_new_deaths,\r\n          local_recovered: res.local_recovered,\r\n\r\n          global_new_cases: res.global_new_cases,\r\n          global_total_cases: res.global_total_cases,\r\n          global_deaths: res.global_deaths,\r\n          global_new_deaths: res.global_new_deaths,\r\n          global_recovered: res.global_recovered,\r\n        };\r\n\r\n        setData(d);\r\n\r\n        const gDataLocal = {\r\n          labels: [\r\n            'Active',\r\n            'Deaths',\r\n            'Recovered'\r\n          ],\r\n          datasets: [\r\n            {\r\n              label: 'Local Cases',\r\n              data: [\r\n                d.local_total_cases - d.local_recovered - d.local_deaths,\r\n                d.local_deaths,\r\n                d.local_recovered\r\n              ],\r\n              backgroundColor: [\r\n                '#F1C40F', // yellow\r\n                '#CB4335', // red\r\n                \"#27AE60\" // green\r\n              ],\r\n              borderWidth: 0\r\n            }\r\n          ]\r\n        };\r\n\r\n        const gDataGlobal = {\r\n          labels: [\r\n            'Active',\r\n            'Deaths',\r\n            'Recovered'\r\n          ],\r\n          datasets: [\r\n            {\r\n              label: 'Global Cases',\r\n              data: [\r\n                d.global_total_cases - d.global_recovered - d.global_deaths,\r\n                d.global_deaths,\r\n                d.global_recovered\r\n              ],\r\n              backgroundColor: [\r\n                '#F1C40F', // yellow\r\n                '#CB4335', // red\r\n                \"#27AE60\" // green\r\n              ],\r\n              borderWidth: 0\r\n            }\r\n          ]\r\n        };\r\n\r\n        setDataLocal(gDataLocal);\r\n        setDataGlobal(gDataGlobal);\r\n      });\r\n\r\n    apiService.getStatistics_Global()\r\n      .then((res: Full_response_data_global) => {\r\n        setSummaries(res.Countries);\r\n        setGlobalUpdateTime(res.Date)\r\n      })\r\n  }\r\n\r\n  let chartOptions = {\r\n    maintainAspectRatio: true,\r\n    aspectRatio: 1,\r\n    rotation: 0.5 * Math.PI,\r\n    legend: {\r\n      labels: {\r\n        fontColor: '#fff'\r\n      },\r\n      position: 'bottom'\r\n    },\r\n    layout: {\r\n      padding: {\r\n        left: 0,\r\n        right: 0,\r\n        top: 0,\r\n        bottom: 0\r\n      }\r\n    }\r\n  };\r\n\r\n  const generateChartModal = (summary: CountrySummaryDto) => {\r\n\r\n    let data = {\r\n      labels: [\r\n        'Active',\r\n        'Deaths',\r\n        'Recovered'\r\n      ],\r\n      datasets: [\r\n        {\r\n          label: 'Local Cases',\r\n          data: [\r\n            summary.TotalConfirmed - summary.TotalRecovered - summary.TotalDeaths,\r\n            summary.TotalDeaths,\r\n            summary.TotalRecovered\r\n          ],\r\n          backgroundColor: [\r\n            '#F1C40F', // yellow\r\n            '#CB4335', // red\r\n            \"#27AE60\" // green\r\n          ],\r\n          borderWidth: 0\r\n        }\r\n      ]\r\n    };\r\n\r\n    return <>\r\n      <Chart width=\"\" type=\"pie\" data={data} options={chartOptions} />\r\n      <div className=\"modalRow\">\r\n        <Row>\r\n          <Col md={6} xs={6}>Total: </Col>\r\n          <Col>{summary.TotalConfirmed.toLocaleString()} ( New: {summary.NewConfirmed.toLocaleString()} )</Col>\r\n        </Row>\r\n        <Row>\r\n          <Col md={6} xs={6}>Total Deaths: </Col>\r\n          <Col>{summary.TotalDeaths.toLocaleString()} ( New: {summary.NewDeaths.toLocaleString()} )</Col>\r\n        </Row>\r\n        <Row>\r\n          <Col md={6} xs={6}>Total Recovered: </Col>\r\n          <Col>{summary.TotalRecovered.toLocaleString()} ( New: {summary.NewRecovered.toLocaleString()} )</Col>\r\n        </Row>\r\n      </div>\r\n    </>\r\n  }\r\n\r\n  const generateTimeLineChartModal = () => {\r\n\r\n    let data = {\r\n      labels: LOCAL_TIMELINE.map((d: CaseSummary) => moment.utc(new Date(d.date)).local().format('MMM|D')),\r\n      datasets: [\r\n        {\r\n          label: 'Confirmed',\r\n          data: LOCAL_TIMELINE.map((d: CaseSummary) => d.confirmed),\r\n          // backgroundColor: '#F1C40F',\r\n          borderColor: '#F1C40F',\r\n          // borderWidth: 0\r\n        },\r\n        {\r\n          label: 'Recovered',\r\n          data: LOCAL_TIMELINE.map((d: CaseSummary) => d.recovered),\r\n          // backgroundColor: '#27AE60',\r\n          borderColor: '#27AE60',\r\n          // borderWidth: 0\r\n        },\r\n        {\r\n          label: 'Deaths',\r\n          data: LOCAL_TIMELINE.map((d: CaseSummary) => d.deaths),\r\n          // backgroundColor: '#CB4335',\r\n          borderColor: '#CB4335',\r\n          // borderWidth: 0\r\n        }\r\n      ]\r\n    };\r\n\r\n    return <>\r\n      <Chart width=\"\" type=\"line\" data={data} options={\r\n        {\r\n          maintainAspectRatio: true,\r\n          aspectRatio: 1.25,\r\n          // fill: 'false',\r\n          legend: {\r\n            labels: {\r\n              fontColor: '#fff'\r\n            },\r\n            position: 'bottom'\r\n          },\r\n          layout: {\r\n            padding: {\r\n              left: 0,\r\n              right: 0,\r\n              top: 30,\r\n              bottom: 20\r\n            }\r\n          },\r\n          scales: {\r\n            xAxes: [{\r\n              id: 'date',\r\n              type: 'category',\r\n              ticks: {\r\n                callback: function (label: any) {\r\n                  var labelArray = label.split(\"|\");\r\n                  return labelArray[1];\r\n                }\r\n              }\r\n            },\r\n            {\r\n              id: 'month',\r\n              type: 'category',\r\n              gridLines: {\r\n                drawOnChartArea: false, // only want the grid lines for one axis to show up\r\n              },\r\n              ticks: {\r\n                callback: function (label: any) {\r\n                  var labelArray = label.split(\"|\");\r\n                  return labelArray[0];\r\n                }\r\n              }\r\n            }\r\n            ]\r\n          }\r\n        }} />\r\n      <div>\r\n        <small>Data updated manually, last updated at <strong>{moment.utc(new Date(2020, 2, 28, 22, 38, 44)).local().format('ddd, MMM D hh:mm:ss a')}</strong></small>\r\n      </div>\r\n      <div>\r\n        Source:&nbsp;\r\n        <a\r\n          href=\"http://www.epid.gov.lk/web/index.php?option=com_content&view=article&id=225&Itemid=518&lang=en\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          epid.gov.lk/\r\n        </a>\r\n      </div>\r\n    </>\r\n  }\r\n  const compare = (a: CountrySummaryDto, b: CountrySummaryDto) => {\r\n    let ac = a.TotalConfirmed;\r\n    let bc = b.TotalConfirmed;\r\n\r\n    switch (filterType) {\r\n      case (FilterType.Deaths):\r\n        ac = a.TotalDeaths;\r\n        bc = b.TotalDeaths;\r\n        break;\r\n      case (FilterType.Recovered):\r\n        ac = a.TotalRecovered;\r\n        bc = b.TotalRecovered;\r\n        break;\r\n      case (FilterType.NewConfirmed):\r\n        ac = a.NewConfirmed;\r\n        bc = b.NewConfirmed;\r\n        break;\r\n      case (FilterType.NewDeaths):\r\n        ac = a.NewDeaths;\r\n        bc = b.NewDeaths;\r\n        break;\r\n      case (FilterType.NewRecovered):\r\n        ac = a.NewRecovered;\r\n        bc = b.NewRecovered;\r\n        break;\r\n    }\r\n\r\n    if (filterDirection === 0) {\r\n      if (ac < bc)\r\n        return 1;\r\n      if (ac > bc)\r\n        return -1;\r\n    }\r\n\r\n    if (filterDirection === 1) {\r\n      if (ac > bc)\r\n        return 1;\r\n      if (ac < bc)\r\n        return -1;\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  const getFilteredResults = (summaries: CountrySummaryDto[]) => {\r\n    return summaries\r\n      .filter(c => c.TotalConfirmed && (!searchTerm || c.Country.toLocaleLowerCase().includes((searchTerm || '').toLocaleLowerCase())))\r\n      .sort(compare);\r\n  }\r\n\r\n  const generateFilteredContents = (countrySummaries: CountrySummaryDto[]) => {\r\n\r\n    let filtered = getFilteredResults(countrySummaries);\r\n\r\n    if (filtered.length > 0)\r\n      return <div className=\"row\">\r\n        {\r\n          filtered\r\n            .map((summary: CountrySummaryDto, index: number) => {\r\n              return <div key={index} className=\"column-4\">\r\n                <div className={\"title\"}>\r\n                  <h2>{summary.Country}: {summary.TotalConfirmed.toLocaleString()}</h2>\r\n                  <p>\r\n                    Total: {summary.TotalConfirmed.toLocaleString()} ( New: {summary.NewConfirmed.toLocaleString()} )<br />\r\n                    Total Deaths: {summary.TotalDeaths.toLocaleString()} ( New: {summary.NewDeaths.toLocaleString()} )<br />\r\n                    Total Recovered: {summary.TotalRecovered.toLocaleString()} ( New: {summary.NewRecovered.toLocaleString()} )<br />\r\n                  </p>\r\n                  <Button className=\"btn\" type=\"button\" onClick={() => setSelected(summary)}>View {summary.Country}'s Chart</Button>\r\n                </div>\r\n              </div>\r\n            })\r\n        }\r\n      </div>;\r\n\r\n    return <div className=\"fixed-row\"><p>No results found for \"{searchTerm}\"</p></div>\r\n\r\n  }\r\n\r\n  return <>\r\n    <div id=\"local\">\r\n      <div className=\"header-row\">\r\n        <h1>Covid-19</h1>\r\n        <h3>Sri Lanka</h3>\r\n        <p>\r\n          Updated at {moment.utc(new Date(updatedDate)).local().format('ddd, MMM D hh:mm:ss a')}<br />\r\n        Data from <a href=\"https://hpb.health.gov.lk/\" target=\"_blank\" rel=\"noopener noreferrer\">HPB | Live updates on New Coronavirus (COVID-19) outbreak</a>\r\n        </p>\r\n      </div>\r\n      <div className=\"row-panel\">\r\n        <Button className=\"btn\" type=\"button\" onClick={() => getData()}>Reload data</Button>\r\n      </div>\r\n      <div className=\"data-panel\">\r\n        <div className=\"row\">\r\n          <div className=\"column\">\r\n            <div className={\"title\"}>\r\n              <h2>Local Cases: {data && data.local_total_cases.toLocaleString()}</h2>\r\n              <span>\r\n                <p>\r\n                  <small>\r\n                    {data &&\r\n                      `( Total cases: ${data.local_total_cases.toLocaleString()}, New cases: ${data.local_new_cases.toLocaleString()}, New deaths: ${data.local_new_deaths.toLocaleString()}, In Hospital: ${data.local_total_number_of_individuals_in_hospitals.toLocaleString()} )`}\r\n                  </small>\r\n                </p>\r\n              </span>\r\n            </div>\r\n            <div className={'chart'}>\r\n              <Chart width=\"\" type=\"pie\" data={dataLocal} options={chartOptions} />\r\n            </div>\r\n            <div>\r\n              <Button type=\"button\" onClick={() => toggleTimeLine(true)}>Open Timeline</Button>\r\n            </div>\r\n          </div>\r\n          <div className=\"column\">\r\n            <div className={\"title\"}>\r\n              <h2>Global Cases: {data && data.global_total_cases.toLocaleString()}</h2>\r\n              <span>\r\n                <p>\r\n                  <small>\r\n                    {data &&\r\n                      `( Total cases: ${data.global_total_cases.toLocaleString()}, New cases: ${data.global_new_cases.toLocaleString()}, New deaths: ${data.global_new_deaths.toLocaleString()} )`}\r\n                  </small>\r\n                </p>\r\n              </span>\r\n            </div>\r\n            <div className={'chart'}>\r\n              <Chart width=\"\" type=\"pie\" data={dataGlobal} options={chartOptions} />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"padding-top-xlg\">\r\n      </div>\r\n    </div>\r\n    <div id=\"global\">\r\n      <div className=\"padding-top-lg\">\r\n      </div>\r\n      {countrySummaries &&\r\n        <div>\r\n          <div className=\"header-row\">\r\n            <h1>Covid-19</h1>\r\n            <h3>Global Summaries</h3>\r\n            <p>\r\n              Updated at {moment.utc(new Date(globalUpdateTime)).local().format('ddd, MMM D hh:mm:ss a')}<br />\r\n              Data from <a href=\"https://documenter.getpostman.com/view/10808728/SzS8rjbc?version=latest\" target=\"_blank\" rel=\"noopener noreferrer\">Coronavirus COVID19 API</a>\r\n            </p>\r\n          </div>\r\n          <div className=\"row-panel\">\r\n            <div className=\"row\">\r\n              <div className=\"column\">\r\n                <InputGroup>\r\n                  <Input\r\n                    value={searchTerm || ''}\r\n                    onChange={((e: any) => e.target && setSearchTerm(e.target.value))}\r\n                    placeholder=\"Enter search term here...\"\r\n                  />\r\n                  {searchTerm &&\r\n                    <InputGroupAddon className={\"addon\"} addonType=\"append\">\r\n                      <Button type=\"button\" onClick={() => setSearchTerm(undefined)} title=\"Clear Search Term\">\r\n                        <i className=\"material-icons\">clear</i>\r\n                      </Button>\r\n                    </InputGroupAddon>\r\n                  }\r\n                </InputGroup>\r\n              </div>\r\n              <div className=\"column\">\r\n                <Select\r\n                  value={FilterSelectOptions.filter((v: any) => v.value === filterType)}\r\n                  placeholder=\"Sort By\"\r\n                  options={FilterSelectOptions}\r\n                  onChange={(e: any) => { e && setFilterType(e.value); }} />\r\n              </div>\r\n              <div className=\"column\">\r\n                <Select\r\n                  value={FilterDirectionOptions.filter((v: any) => v.value === filterDirection)}\r\n                  options={FilterDirectionOptions}\r\n                  onChange={(e: any) => { e && setFilterDirection(e.value); }} />\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"data-panel\">\r\n            {generateFilteredContents(countrySummaries)}\r\n          </div>\r\n          {selectedSummary &&\r\n            <Modal\r\n              isOpen={selectedSummary !== undefined}\r\n              toggle={() => setSelected(undefined)}\r\n            >\r\n              <ModalHeader className=\"chart-modal\" toggle={() => setSelected(undefined)}>\r\n                <h2>{selectedSummary.Country}</h2>\r\n              </ModalHeader>\r\n              <ModalBody className=\"chart-modal\">\r\n                {generateChartModal(selectedSummary)}\r\n              </ModalBody>\r\n              <ModalFooter className=\"chart-modal footer\">\r\n                <Button className=\"btn\" type=\"button\" onClick={() => setSelected(undefined)}>Close Chart</Button>\r\n              </ModalFooter>\r\n            </Modal>\r\n          }\r\n        </div>\r\n      }\r\n    </div>\r\n    <Button\r\n      type=\"button\"\r\n      id=\"goToTopButton\"\r\n      onClick={() => {\r\n        document.body.scrollTop = 0;\r\n        document.documentElement.scrollTop = 0;\r\n      }}\r\n      title=\"Go to top\"\r\n    >\r\n      Top\r\n    </Button>\r\n    <Button\r\n      type=\"button\"\r\n      id=\"goToGlobalButton\"\r\n      onClick={onGoToGlobalClicked}\r\n      title=\"Go to top\"\r\n    >\r\n      Global\r\n    </Button>\r\n    <Modal\r\n      isOpen={showTimeLine}\r\n      toggle={() => toggleTimeLine(false)}\r\n    >\r\n      <ModalHeader className=\"chart-modal\" toggle={() => toggleTimeLine(false)}>\r\n        <h2>Local Timeline</h2>\r\n      </ModalHeader>\r\n      <ModalBody className=\"chart-modal\">\r\n        {generateTimeLineChartModal()}\r\n      </ModalBody>\r\n      <ModalFooter className=\"chart-modal footer\">\r\n        <Button className=\"btn\" type=\"button\" onClick={() => toggleTimeLine(false)}>Close Chart</Button>\r\n      </ModalFooter>\r\n    </Modal>\r\n  </>\r\n}\r\n\r\nexport default Main;","import React from 'react';\n\nimport './App.css';\nimport Main from './content/Main';\n\nfunction App() {\n  return (\n    <div className=\"wrapper\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport './scss/styles.scss';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}