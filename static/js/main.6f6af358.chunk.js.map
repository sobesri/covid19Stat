{"version":3,"sources":["services/api.service.ts","content/Main.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["instance","axios","create","baseURL","defaults","headers","common","apiService","get","getStatistics","then","res","data","controller","action","urlParams","queryParams","apiRequest","method","url","createUrl","options","createRequestOptions","request","catch","error","console","log","forEach","param","params","queryString","responseType","Main","useState","setData","Date","updatedDate","setDate","dataLocal","setDataLocal","dataGlobal","setDataGlobal","getTime","time","setTime","useEffect","getData","timer","setTimeout","clearTimeout","update_date_time","d","local_new_cases","local_total_cases","local_total_number_of_individuals_in_hospitals","local_deaths","local_new_deaths","local_recovered","global_new_cases","global_total_cases","global_deaths","global_new_deaths","global_recovered","gDataGlobal","labels","datasets","label","backgroundColor","borderWidth","chartOptions","maintainAspectRatio","aspectRatio","legend","position","layout","padding","left","right","top","bottom","className","moment","format","href","target","rel","Button","type","onClick","width","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.6f6af358.chunk.js","sourcesContent":["import * as queryString from 'query-string';\r\n\r\nimport axios, { AxiosRequestConfig, Method } from 'axios';\r\nimport { Full_response_data } from '../types';\r\n\r\nvar instance = axios.create({\r\n  baseURL: 'https://hpb.health.gov.lk/api/',\r\n});\r\naxios.defaults.headers.common['Content-Type'] = 'application/json';\r\naxios.defaults.headers.common['Accept'] = 'application/json';\r\n\r\nexport const apiService = {\r\n  get,\r\n  getStatistics\r\n}\r\n\r\nfunction getStatistics() {\r\n  return get<Full_response_data>('', 'get-current-statistical', [])\r\n    .then((res: any) => res.data);\r\n}\r\n\r\nfunction get<T>(controller: string, action: string = '', urlParams: string[] = [], queryParams: any = null) {\r\n  return apiRequest<T>('get', controller, action, null, urlParams, queryParams);\r\n}\r\n\r\nfunction apiRequest<T>(method: Method, controller: string, action: string = '', data: any, urlParams: string[] = [],\r\n  queryParams: any = null) {\r\n  let url = createUrl(controller, action, urlParams, queryParams);\r\n  let options = createRequestOptions(url, method, data);\r\n\r\n  return instance.request<T>(options)\r\n    .then(res => res && res.data)\r\n    .catch(error => {\r\n      console.log(error);\r\n      throw error;\r\n    });\r\n}\r\n\r\nfunction createUrl(controller: string, action: string = '', urlParams: string[] = [], queryParams: any = null) {\r\n  let url = controller + (action ? '/' + action : '');\r\n\r\n  urlParams.forEach(param => {\r\n    url += '/' + param;\r\n  });\r\n\r\n  let params = '';\r\n  if (queryParams) {\r\n    params += '?' + queryString.stringify(queryParams);\r\n  }\r\n\r\n  return url += params;\r\n}\r\n\r\nfunction createRequestOptions(url: string, method: Method, data: any, responseType?: any) {\r\n  var options: AxiosRequestConfig = {\r\n    url,\r\n    method,\r\n    data\r\n  }\r\n\r\n  if (responseType) {\r\n    options.responseType = responseType;\r\n  }\r\n\r\n  return options;\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { apiService } from '../services/api.service';\r\nimport { Response_data, Full_response_data } from '../types';\r\nimport { Button } from 'reactstrap';\r\nimport { Chart } from 'primereact/chart';\r\n\r\nimport moment from 'moment';\r\n\r\ninterface Case {\r\n  total: number,\r\n  active: number,\r\n  recovered: number,\r\n  dead: number\r\n}\r\n\r\nconst Main = () => {\r\n  const [data, setData] = useState<Response_data>();\r\n  const [updatedDate, setDate] = useState<Date>(new Date());\r\n  const [dataLocal, setDataLocal] = useState<any>();\r\n  const [dataGlobal, setDataGlobal] = useState<any>();\r\n  const [time, setTime] = useState(new Date().getTime());\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const timer = setTimeout(() => {\r\n      setTime(new Date().getTime());\r\n      getData();\r\n    }, 300000);\r\n\r\n    return () => {\r\n      clearTimeout(timer);\r\n    };\r\n  }, [time]);\r\n\r\n  const getData = () => {\r\n    apiService.getStatistics()\r\n      .then((res: Full_response_data) => {\r\n        setDate(new Date(res.update_date_time));\r\n\r\n        let d: Response_data = {\r\n          local_new_cases: res.local_new_cases,\r\n          local_total_cases: res.local_total_cases,\r\n          local_total_number_of_individuals_in_hospitals: res.local_total_number_of_individuals_in_hospitals,\r\n          local_deaths: res.local_deaths,\r\n          local_new_deaths: res.local_new_deaths,\r\n          local_recovered: res.local_recovered,\r\n\r\n          global_new_cases: res.global_new_cases,\r\n          global_total_cases: res.global_total_cases,\r\n          global_deaths: res.global_deaths,\r\n          global_new_deaths: res.global_new_deaths,\r\n          global_recovered: res.global_recovered,\r\n        };\r\n\r\n        setData(d);\r\n\r\n        const gDataLocal = {\r\n          labels: [\r\n            'Active',\r\n            'Deaths',\r\n            'Recovered'\r\n          ],\r\n          datasets: [\r\n            {\r\n              label: 'Local Cases',\r\n              data: [\r\n                d.local_total_cases - d.local_recovered - d.local_deaths,\r\n                d.local_deaths,\r\n                d.local_recovered\r\n              ],\r\n              backgroundColor: [\r\n                '#F1C40F', // yellow\r\n                '#CB4335', // red\r\n                \"#27AE60\" // green\r\n              ],\r\n              borderWidth: 0\r\n            }\r\n          ]\r\n        };\r\n\r\n        const gDataGlobal = {\r\n          labels: [\r\n            'Active',\r\n            'Deaths',\r\n            'Recovered'\r\n          ],\r\n          datasets: [\r\n            {\r\n              label: 'Global Cases',\r\n              data: [\r\n                d.global_total_cases - d.global_recovered - d.global_deaths,\r\n                d.global_deaths,\r\n                d.global_recovered\r\n              ],\r\n              backgroundColor: [\r\n                '#F1C40F', // yellow\r\n                '#CB4335', // red\r\n                \"#27AE60\" // green\r\n              ],\r\n              borderWidth: 0\r\n            }\r\n          ]\r\n        };\r\n\r\n        setDataLocal(gDataLocal);\r\n        setDataGlobal(gDataGlobal);\r\n      });\r\n  }\r\n\r\n  let chartOptions = {\r\n    maintainAspectRatio: true,\r\n    aspectRatio: 1,\r\n    legend: {\r\n      position: 'bottom'\r\n    },\r\n    layout: {\r\n      padding: {\r\n        left: 0,\r\n        right: 0,\r\n        top: 0,\r\n        bottom: 0\r\n      }\r\n    }\r\n  };\r\n\r\n  return <>\r\n    <div className=\"header-row\">\r\n      <h1>Covid-19</h1>\r\n      <h3>Sri Lanka</h3>\r\n      <p>\r\n        Updated at {moment(new Date(updatedDate)).format('ddd, MMM D hh:mm:ss')}<br />\r\n        Data from <a href=\"https://hpb.health.gov.lk/\" target=\"_blank\" rel=\"noopener noreferrer\">HPB | Live updates on New Coronavirus (COVID-19) outbreak</a>\r\n      </p>\r\n    </div>\r\n    <div className=\"refresh-button-panel\">\r\n      <Button type=\"button\" onClick={() => getData()}>Reload data</Button>\r\n    </div>\r\n    <div className=\"data-panel\">\r\n      <div className=\"row\">\r\n        <div className=\"column\">\r\n          <div className={\"title\"}>\r\n            <h2>Local Cases: {data && data.local_total_cases}</h2>\r\n            <p>\r\n              <small>\r\n                {data &&\r\n                  `( Total cases: ${data.local_total_cases}, New cases: ${data.local_new_cases}, New deaths: ${data.local_new_deaths}, In Hospital: ${data.local_total_number_of_individuals_in_hospitals} )`}\r\n              </small>\r\n            </p>\r\n          </div>\r\n          <div className={'chart'}>\r\n            <Chart width=\"\" type=\"pie\" data={dataLocal} options={chartOptions} />\r\n          </div>\r\n        </div>\r\n        <div className=\"column\">\r\n          <div className={\"title\"}>\r\n            <h2>Global Cases: {data && data.global_total_cases}</h2>\r\n            <p>\r\n              <small>\r\n                {data &&\r\n                  `( Total cases: ${data.global_total_cases}, New cases: ${data.global_new_cases}, New deaths: ${data.global_new_deaths} )`}\r\n              </small>\r\n            </p>\r\n          </div>\r\n          <div className={'chart'}>\r\n            <Chart width=\"\" type=\"pie\" data={dataGlobal} options={chartOptions} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </>\r\n}\r\n\r\nexport default Main;","import React from 'react';\n\nimport './App.css';\nimport Main from './content/Main';\n\nfunction App() {\n  return (\n    <div className=\"wrapper\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport './scss/styles.scss';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}