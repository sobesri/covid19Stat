{"version":3,"sources":["services/api.service.ts","content/Main.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["instanceSl","axios","create","baseURL","instanceGlobal","defaults","headers","common","apiService","get","getStatistics_HPB","then","res","data","getStatistics_Global","instance","controller","action","urlParams","queryParams","apiRequest","method","url","createUrl","options","createRequestOptions","request","catch","error","console","log","forEach","param","params","queryString","responseType","Main","useState","setData","Date","updatedDate","setDate","globalUpdateTime","setGlobalUpdateTime","dataLocal","setDataLocal","dataGlobal","setDataGlobal","getTime","time","setTime","countrySummaries","setSummaries","selectedSummary","setSelected","searchTerm","setSearchterm","useEffect","getData","timer","setTimeout","clearTimeout","useLayoutEffect","handleScroll","goToTop","document","getElementById","goToGlobal","window","scrollY","style","display","addEventListener","removeEventListener","update_date_time","d","local_new_cases","local_total_cases","local_total_number_of_individuals_in_hospitals","local_deaths","local_new_deaths","local_recovered","global_new_cases","global_total_cases","global_deaths","global_new_deaths","global_recovered","gDataGlobal","labels","datasets","label","backgroundColor","borderWidth","Countries","chartOptions","maintainAspectRatio","aspectRatio","legend","position","layout","padding","left","right","top","bottom","compare","a","b","TotalConfirmed","id","className","moment","utc","local","format","href","target","rel","Button","type","onClick","width","Input","value","onChange","e","placeholder","filtered","filter","c","Country","toLocaleLowerCase","includes","length","sort","map","summary","index","key","NewConfirmed","TotalDeaths","NewDeaths","TotalRecovered","NewRecovered","getFilteredResults","Modal","isOpen","undefined","toggle","ModalHeader","ModalBody","Row","Col","md","xs","generateChartModal","ModalFooter","body","scrollTop","documentElement","title","globalPanel","offsetTop","App","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.d2527203.chunk.js","sourcesContent":["import * as queryString from 'query-string';\r\n\r\nimport axios, { AxiosRequestConfig, Method, AxiosInstance } from 'axios';\r\nimport { Full_response_data, Full_response_data_global } from '../types';\r\n\r\nvar instanceSl = axios.create({\r\n  baseURL: 'https://hpb.health.gov.lk/api/',\r\n});\r\n\r\nvar instanceGlobal = axios.create({\r\n  baseURL: 'https://api.covid19api.com/'\r\n})\r\n\r\naxios.defaults.headers.common['Content-Type'] = 'application/json';\r\naxios.defaults.headers.common['Accept'] = 'application/json';\r\n\r\nexport const apiService = {\r\n  get,\r\n  getStatistics_HPB,\r\n  getStatistics_Global\r\n}\r\n\r\nfunction getStatistics_HPB() {\r\n  return get<Full_response_data>(instanceSl, '', 'get-current-statistical', [])\r\n    .then((res: any) => res.data);\r\n}\r\n\r\nfunction getStatistics_Global() {\r\n  return get<Full_response_data_global>(instanceGlobal, '', 'summary', [])\r\n    .then((res: any) => res);\r\n}\r\n\r\nfunction get<T>(instance: AxiosInstance, controller: string, action: string = '', urlParams: string[] = [], queryParams: any = null) {\r\n  return apiRequest<T>(instance, 'get', controller, action, null, urlParams, queryParams);\r\n}\r\n\r\nfunction apiRequest<T>(instance: AxiosInstance, method: Method, controller: string, action: string = '', data: any, urlParams: string[] = [],\r\n  queryParams: any = null) {\r\n  let url = createUrl(controller, action, urlParams, queryParams);\r\n  let options = createRequestOptions(url, method, data);\r\n\r\n  return instance.request<T>(options)\r\n    .then(res => res && res.data)\r\n    .catch(error => {\r\n      console.log(error);\r\n      throw error;\r\n    });\r\n}\r\n\r\nfunction createUrl(controller: string, action: string = '', urlParams: string[] = [], queryParams: any = null) {\r\n  let url = controller + (action ? '/' + action : '');\r\n\r\n  urlParams.forEach(param => {\r\n    url += '/' + param;\r\n  });\r\n\r\n  let params = '';\r\n  if (queryParams) {\r\n    params += '?' + queryString.stringify(queryParams);\r\n  }\r\n\r\n  return url += params;\r\n}\r\n\r\nfunction createRequestOptions(url: string, method: Method, data: any, responseType?: any) {\r\n  var options: AxiosRequestConfig = {\r\n    url,\r\n    method,\r\n    data\r\n  }\r\n\r\n  if (responseType) {\r\n    options.responseType = responseType;\r\n  }\r\n\r\n  return options;\r\n}\r\n","import React, { useState, useEffect, useLayoutEffect } from 'react';\r\nimport { apiService } from '../services/api.service';\r\nimport { Response_data, Full_response_data, CountrySummaryDto, Full_response_data_global } from '../types';\r\nimport { Button, ModalHeader, Modal, ModalBody, ModalFooter, Input, Row, Col } from 'reactstrap';\r\nimport { Chart } from 'primereact/chart';\r\n\r\nimport moment from 'moment';\r\n\r\ninterface Case {\r\n  total: number,\r\n  active: number,\r\n  recovered: number,\r\n  dead: number\r\n}\r\n\r\nconst Main = () => {\r\n  const [data, setData] = useState<Response_data>();\r\n  const [updatedDate, setDate] = useState<Date>(new Date());\r\n  const [globalUpdateTime, setGlobalUpdateTime] = useState<Date>(new Date());\r\n  const [dataLocal, setDataLocal] = useState<any>();\r\n  const [dataGlobal, setDataGlobal] = useState<any>();\r\n  const [time, setTime] = useState(new Date().getTime());\r\n  const [countrySummaries, setSummaries] = useState<CountrySummaryDto[]>();\r\n  const [selectedSummary, setSelected] = useState<CountrySummaryDto>();\r\n  const [searchTerm, setSearchterm] = useState();\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const timer = setTimeout(() => {\r\n      setTime(new Date().getTime());\r\n      getData();\r\n    }, 300000);\r\n\r\n    return () => {\r\n      clearTimeout(timer);\r\n    };\r\n  }, [time]);\r\n\r\n  useLayoutEffect(() => {\r\n    const handleScroll = () => {\r\n      var goToTop = document.getElementById(\"goToTopButton\");\r\n      var goToGlobal = document.getElementById(\"goToGlobalButton\");\r\n      if (goToTop && goToGlobal) {\r\n        if (window.scrollY > 500)\r\n          goToGlobal.style.display = \"none\";\r\n        else\r\n          goToGlobal.style.display = \"block\";\r\n        if (window.scrollY > 900)\r\n          goToTop.style.display = \"block\";\r\n\r\n        else\r\n          goToTop.style.display = \"none\";\r\n\r\n      }\r\n    }\r\n\r\n    window.addEventListener('scroll', handleScroll)\r\n\r\n    return () => window.removeEventListener('scroll', handleScroll)\r\n  }, [])\r\n\r\n  const onGoToGlobalClicked = () => {\r\n    var globalPanel = document.getElementById(\"global\");\r\n    document.body.scrollTop = globalPanel ? globalPanel.offsetTop : 0;\r\n    document.documentElement.scrollTop = globalPanel ? globalPanel.offsetTop : 0;\r\n  }\r\n\r\n  const getData = () => {\r\n    apiService.getStatistics_HPB()\r\n      .then((res: Full_response_data) => {\r\n        setDate(new Date(res.update_date_time));\r\n\r\n        let d: Response_data = {\r\n          local_new_cases: res.local_new_cases,\r\n          local_total_cases: res.local_total_cases,\r\n          local_total_number_of_individuals_in_hospitals: res.local_total_number_of_individuals_in_hospitals,\r\n          local_deaths: res.local_deaths,\r\n          local_new_deaths: res.local_new_deaths,\r\n          local_recovered: res.local_recovered,\r\n\r\n          global_new_cases: res.global_new_cases,\r\n          global_total_cases: res.global_total_cases,\r\n          global_deaths: res.global_deaths,\r\n          global_new_deaths: res.global_new_deaths,\r\n          global_recovered: res.global_recovered,\r\n        };\r\n\r\n        setData(d);\r\n\r\n        const gDataLocal = {\r\n          labels: [\r\n            'Active',\r\n            'Deaths',\r\n            'Recovered'\r\n          ],\r\n          datasets: [\r\n            {\r\n              label: 'Local Cases',\r\n              data: [\r\n                d.local_total_cases - d.local_recovered - d.local_deaths,\r\n                d.local_deaths,\r\n                d.local_recovered\r\n              ],\r\n              backgroundColor: [\r\n                '#F1C40F', // yellow\r\n                '#CB4335', // red\r\n                \"#27AE60\" // green\r\n              ],\r\n              borderWidth: 0\r\n            }\r\n          ]\r\n        };\r\n\r\n        const gDataGlobal = {\r\n          labels: [\r\n            'Active',\r\n            'Deaths',\r\n            'Recovered'\r\n          ],\r\n          datasets: [\r\n            {\r\n              label: 'Global Cases',\r\n              data: [\r\n                d.global_total_cases - d.global_recovered - d.global_deaths,\r\n                d.global_deaths,\r\n                d.global_recovered\r\n              ],\r\n              backgroundColor: [\r\n                '#F1C40F', // yellow\r\n                '#CB4335', // red\r\n                \"#27AE60\" // green\r\n              ],\r\n              borderWidth: 0\r\n            }\r\n          ]\r\n        };\r\n\r\n        setDataLocal(gDataLocal);\r\n        setDataGlobal(gDataGlobal);\r\n      });\r\n\r\n    apiService.getStatistics_Global()\r\n      .then((res: Full_response_data_global) => {\r\n        setSummaries(res.Countries);\r\n        setGlobalUpdateTime(res.Date)\r\n      })\r\n  }\r\n\r\n  let chartOptions = {\r\n    maintainAspectRatio: true,\r\n    aspectRatio: 1,\r\n    legend: {\r\n      position: 'bottom'\r\n    },\r\n    layout: {\r\n      padding: {\r\n        left: 0,\r\n        right: 0,\r\n        top: 0,\r\n        bottom: 0\r\n      }\r\n    }\r\n  };\r\n\r\n  const generateChartModal = (summary: CountrySummaryDto) => {\r\n\r\n    let data = {\r\n      labels: [\r\n        'Active',\r\n        'Deaths',\r\n        'Recovered'\r\n      ],\r\n      datasets: [\r\n        {\r\n          label: 'Local Cases',\r\n          data: [\r\n            summary.TotalConfirmed - summary.TotalRecovered - summary.TotalDeaths,\r\n            summary.TotalDeaths,\r\n            summary.TotalRecovered\r\n          ],\r\n          backgroundColor: [\r\n            '#F1C40F', // yellow\r\n            '#CB4335', // red\r\n            \"#27AE60\" // green\r\n          ],\r\n          borderWidth: 0\r\n        }\r\n      ]\r\n    };\r\n\r\n    return <>\r\n      <Chart width=\"\" type=\"pie\" data={data} options={chartOptions} />\r\n      <div className=\"modalRow\">\r\n        <Row>\r\n          <Col md={6} xs={6}>Total: </Col>\r\n          <Col>{summary.TotalConfirmed} ( New: {summary.NewConfirmed} )</Col>\r\n        </Row>\r\n        <Row>\r\n          <Col md={6} xs={6}>Total Deaths: </Col>\r\n          <Col>{summary.TotalDeaths} ( New: {summary.NewDeaths} )</Col>\r\n        </Row>\r\n        <Row>\r\n          <Col md={6} xs={6}>Total Recovered: </Col>\r\n          <Col>{summary.TotalRecovered} ( New: {summary.NewRecovered} )</Col>\r\n        </Row>\r\n      </div>\r\n    </>\r\n  }\r\n\r\n  const compare = (a: CountrySummaryDto, b: CountrySummaryDto) => {\r\n    if (a.TotalConfirmed < b.TotalConfirmed) {\r\n      return 1;\r\n    }\r\n    if (a.TotalConfirmed > b.TotalConfirmed) {\r\n      return -1;\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  const getFilteredResults = (countrySummaries: CountrySummaryDto[]) => {\r\n\r\n    let filtered = countrySummaries\r\n      .filter(c => c.TotalConfirmed && (!searchTerm || c.Country.toLocaleLowerCase().includes((searchTerm || '').toLocaleLowerCase())))\r\n\r\n    if (filtered.length > 0)\r\n      return <div className=\"row\">\r\n        {\r\n          filtered\r\n            .sort(compare)\r\n            .map((summary: CountrySummaryDto, index: number) => {\r\n              return <div key={index} className=\"column-4\">\r\n                <div className={\"title\"}>\r\n                  <h2>{summary.Country}: {summary.TotalConfirmed}</h2>\r\n                  <p>\r\n                    Total: {summary.TotalConfirmed} ( New: {summary.NewConfirmed} )<br />\r\n                    Total Deaths: {summary.TotalDeaths} ( New: {summary.NewDeaths} )<br />\r\n                    Total Recovered: {summary.TotalRecovered} ( New: {summary.NewRecovered} )<br />\r\n                  </p>\r\n                  <Button className=\"btn\" type=\"button\" onClick={() => setSelected(summary)}>View {summary.Country}'s Chart</Button>\r\n                </div>\r\n              </div>\r\n            })\r\n        }\r\n      </div>;\r\n\r\n    return <div className=\"fixed-row\"><p>No results found for \"{searchTerm}\"</p></div>\r\n\r\n  }\r\n\r\n  return <>\r\n    <div id=\"local\">\r\n      <div className=\"header-row\">\r\n        <h1>Covid-19</h1>\r\n        <h3>Sri Lanka</h3>\r\n        <p>\r\n          Updated at {moment.utc(new Date(updatedDate)).local().format('ddd, MMM D hh:mm:ss a')}<br />\r\n        Data from <a href=\"https://hpb.health.gov.lk/\" target=\"_blank\" rel=\"noopener noreferrer\">HPB | Live updates on New Coronavirus (COVID-19) outbreak</a>\r\n        </p>\r\n      </div>\r\n      <div className=\"row-panel\">\r\n        <Button className=\"btn\" type=\"button\" onClick={() => getData()}>Reload data</Button>\r\n      </div>\r\n      <div className=\"data-panel\">\r\n        <div className=\"row\">\r\n          <div className=\"column\">\r\n            <div className={\"title\"}>\r\n              <h2>Local Cases: {data && data.local_total_cases}</h2>\r\n              <p>\r\n                <small>\r\n                  {data &&\r\n                    `( Total cases: ${data.local_total_cases}, New cases: ${data.local_new_cases}, New deaths: ${data.local_new_deaths}, In Hospital: ${data.local_total_number_of_individuals_in_hospitals} )`}\r\n                </small>\r\n              </p>\r\n            </div>\r\n            <div className={'chart'}>\r\n              <Chart width=\"\" type=\"pie\" data={dataLocal} options={chartOptions} />\r\n            </div>\r\n          </div>\r\n          <div className=\"column\">\r\n            <div className={\"title\"}>\r\n              <h2>Global Cases: {data && data.global_total_cases}</h2>\r\n              <p>\r\n                <small>\r\n                  {data &&\r\n                    `( Total cases: ${data.global_total_cases}, New cases: ${data.global_new_cases}, New deaths: ${data.global_new_deaths} )`}\r\n                </small>\r\n              </p>\r\n            </div>\r\n            <div className={'chart'}>\r\n              <Chart width=\"\" type=\"pie\" data={dataGlobal} options={chartOptions} />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"padding-top-xlg\">\r\n      </div>\r\n    </div>\r\n    <div id=\"global\">\r\n      <div className=\"padding-top-lg\">\r\n      </div>\r\n      {countrySummaries &&\r\n        <div>\r\n          <div className=\"header-row\">\r\n            <h1>Covid-19</h1>\r\n            <h3>Global Summaries</h3>\r\n            <p>\r\n              Updated at {moment.utc(new Date(globalUpdateTime)).local().format('ddd, MMM D hh:mm:ss a')}<br />\r\n              Data from <a href=\"https://documenter.getpostman.com/view/10808728/SzS8rjbc?version=latest\" target=\"_blank\" rel=\"noopener noreferrer\">Coronavirus COVID19 API</a>\r\n            </p>\r\n          </div>\r\n          <div className=\"row-panel\">\r\n            <div className=\"row\">\r\n              <Input value={searchTerm || ''} onChange={((e: any) => e.target && setSearchterm(e.target.value))} placeholder=\"Enter search term here...\" />\r\n            </div>\r\n          </div>\r\n          <div className=\"data-panel\">\r\n            {getFilteredResults(countrySummaries)}\r\n          </div>\r\n          {selectedSummary &&\r\n            <Modal\r\n              isOpen={selectedSummary !== undefined}\r\n              toggle={() => setSelected(undefined)}\r\n            >\r\n              <ModalHeader className=\"chart-modal\" toggle={() => setSelected(undefined)}>\r\n                <h2>{selectedSummary.Country}</h2>\r\n              </ModalHeader>\r\n              <ModalBody className=\"chart-modal\">\r\n                {generateChartModal(selectedSummary)}\r\n              </ModalBody>\r\n              <ModalFooter className=\"chart-modal footer\">\r\n                <Button className=\"btn\" type=\"button\" onClick={() => setSelected(undefined)}>Close Chart</Button>\r\n              </ModalFooter>\r\n            </Modal>\r\n          }\r\n        </div>\r\n      }\r\n    </div>\r\n    <Button\r\n      type=\"button\"\r\n      id=\"goToTopButton\"\r\n      onClick={() => {\r\n        document.body.scrollTop = 0;\r\n        document.documentElement.scrollTop = 0;\r\n      }}\r\n      title=\"Go to top\"\r\n    >\r\n      Top\r\n    </Button>\r\n    <Button\r\n      type=\"button\"\r\n      id=\"goToGlobalButton\"\r\n      onClick={onGoToGlobalClicked}\r\n      title=\"Go to top\"\r\n    >\r\n      Global\r\n    </Button>\r\n  </>\r\n}\r\n\r\nexport default Main;","import React from 'react';\n\nimport './App.css';\nimport Main from './content/Main';\n\nfunction App() {\n  return (\n    <div className=\"wrapper\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport './scss/styles.scss';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}